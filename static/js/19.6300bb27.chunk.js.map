{"version":3,"file":"static/js/19.6300bb27.chunk.js","mappings":"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","sources":["containers/login/Register.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { styled } from '@mui/system';\nimport { Box, Typography, Button, Grid } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\n\nimport { HeaderLogin, Layout, InputForm, InputPassword } from 'components';\nimport { registerStyles } from 'styles';\nimport { MD5, API } from 'config';\n\nconst Register = () => {\n  // state\n  const [showPwd, setShowPwd] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Styles\n  const styles = registerStyles;\n  const LoginBox = styled(Box)(({ theme }) => ({\n    ...styles.loginBox(theme),\n    ...styles.registerBox(theme),\n  }));\n  const RegisterBtn = styled(Button)({\n    ...styles.loginButton,\n    ...styles.registerregisterBtn,\n  });\n  const ButtonLogin = styled(Button)(styles.loginButton);\n\n  // Otros\n  const { enqueueSnackbar } = useSnackbar();\n  const navigate = useNavigate();\n  const { control, handleSubmit, setError } = useForm({\n    email: '',\n    name: '',\n    confirmPassword: '',\n    password: '',\n  });\n\n  const register = async values => {\n    try {\n      if (values.password !== values.confirmPassword) {\n        enqueueSnackbar('Contraseñas no coinciden', {\n          variant: 'error',\n        });\n\n        return;\n      }\n      // Armamos los parametros\n      const params = {\n        usr: values.email,\n        name: values.name,\n        pwd: MD5(values.password),\n      };\n\n      setLoading(true);\n\n      // Hacemos login\n      await API.register(params);\n\n      enqueueSnackbar('Usuario registrado correctamente', {\n        variant: 'success',\n      });\n\n      // Volvemos al inicio\n      navigate('/login');\n\n      setLoading(false);\n    } catch (e) {\n      const { status, data } = e;\n\n      switch (status) {\n        case 400:\n          enqueueSnackbar(data.msg, {\n            variant: 'error',\n          });\n          break;\n        case 405:\n          setError('email', {\n            type: 'custom',\n            message: 'Formato de correo incorrecto',\n          });\n          break;\n        case 500:\n          enqueueSnackbar('Error Interno', {\n            variant: 'error',\n          });\n          break;\n        default:\n          enqueueSnackbar('Error Interno', {\n            variant: 'error',\n          });\n      }\n\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout isLoading={loading}>\n      <HeaderLogin />\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        sx={styles.mainBox}>\n        <LoginBox>\n          <Typography variant=\"h4\" body=\"h1\" sx={styles.titleLogin}>\n            Registro de usuario\n          </Typography>\n\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <InputForm\n                name=\"email\"\n                label=\"Correo:\"\n                className={styles.inputForm}\n                control={control}\n                validations={{\n                  required: 'Campo requerido',\n                  validate: {\n                    email: value =>\n                      (value && /\\S+@\\S+\\.\\S+/.test(value)) ||\n                      'Correo inválido',\n                  },\n                }}\n                fullWidth\n                placeholder=\"Correo\"\n                inputProps={{\n                  maxLength: 128,\n                  inputMode: 'email',\n                }}\n                variant=\"filled\"\n                replace={val => val.replace(/\\s/g, '')}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <InputForm\n                name=\"name\"\n                label=\"Nombre de usuario\"\n                className={styles.inputForm}\n                control={control}\n                validations={{\n                  required: 'Campo requerido',\n                }}\n                fullWidth\n                placeholder=\"Nombre de usuario\"\n                inputProps={{\n                  maxLength: 64,\n                }}\n                variant=\"filled\"\n                replace={val => val.replace(/\\s/g, '')}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <InputPassword\n                name=\"password\"\n                label=\"Contraseña:\"\n                placeholder=\"Contraseña\"\n                showPwd={showPwd}\n                setShowPwd={() => setShowPwd(prevState => !prevState)}\n                control={control}\n                classes={styles.inputForm}\n                fullWidth\n                validations={{\n                  required: 'Campo requerido',\n                  validate: {\n                    noSpaces: value =>\n                      (value && /^\\S*$/.test(value)) || 'Contraseña inválida',\n                  },\n                }}\n                variant=\"filled\"\n                replace={val => val.replace(/\\s/g, '')}\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n              <InputPassword\n                name=\"confirmPassword\"\n                label=\"Confirmar Contraseña:\"\n                placeholder=\"Confirmar Contraseña\"\n                showPwd={showPwd}\n                setShowPwd={() => setShowPwd(prevState => !prevState)}\n                control={control}\n                classes={styles.inputForm}\n                fullWidth\n                validations={{\n                  required: 'Campo requerido',\n                  validate: {\n                    noSpaces: value =>\n                      (value && /^\\S*$/.test(value)) || 'Contraseña inválida',\n                  },\n                }}\n                variant=\"filled\"\n                replace={val => val.replace(/\\s/g, '')}\n              />\n            </Grid>\n          </Grid>\n\n          <RegisterBtn variant=\"primary\" onClick={handleSubmit(register)}>\n            Registrarse\n          </RegisterBtn>\n          <ButtonLogin variant=\"secondary\" onClick={() => navigate('/login')}>\n            Volver\n          </ButtonLogin>\n        </LoginBox>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default Register;\n"],"names":["useState","showPwd","setShowPwd","loading","setLoading","styles","registerStyles","LoginBox","styled","Box","theme","loginBox","registerBox","RegisterBtn","Button","loginButton","registerregisterBtn","ButtonLogin","enqueueSnackbar","useSnackbar","navigate","useNavigate","useForm","email","name","confirmPassword","password","control","handleSubmit","setError","register","values","variant","params","usr","pwd","MD5","API","status","data","msg","type","message","isLoading","display","justifyContent","alignItems","sx","mainBox","body","titleLogin","container","spacing","item","xs","sm","label","className","inputForm","validations","required","validate","value","test","fullWidth","placeholder","inputProps","maxLength","inputMode","replace","val","prevState","classes","noSpaces","onClick"],"sourceRoot":""}